name: CI/CD Pipeline Demo

on:
  # Run only when a PR targets 'main'.
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build-Test-Analyze
    runs-on: windows-latest
    steps:
      # 1) Check out code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Set up Java (Sonar Scanner needs Java)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu

      # 3) Set up .NET SDK (change version if you need older .NET)
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.x'

      # 4) Restore
      - name: Restore
        run: dotnet restore

      # 5) Early Build (fail fast if it doesn't compile)
      - name: Build (Early)
        run: dotnet build --no-restore --configuration Release

      # 6) Early Test (fail early if tests fail)
      - name: Test (Early)
        run: dotnet test --no-build --configuration Release

      # -- IF we reach here, it means the project builds and tests pass --

      # 7) Cache SonarQube packages (optional optimization)
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # 8) Sonar ANALYZE steps
      - name: Sonar BEGIN
        id: sonar-begin
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"Zach-etier_CI-CD-Pipeline-Demo" `
            /o:"zach-etier" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/coverage.opencover.xml"
          Write-Host "SonarQube Begin completed"

      - name: Build (Sonar)
        shell: powershell
        run: dotnet build --no-restore --configuration Release

      - name: Test (Sonar coverage)
        shell: powershell
        run: dotnet test --no-build --configuration Release `
          /p:CollectCoverage=true `
          /p:CoverletOutput=TestResults/coverage.opencover.xml `
          /p:CoverletOutputFormat=opencover

      - name: Sonar END
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          Write-Host "SonarQube Analysis completed"
