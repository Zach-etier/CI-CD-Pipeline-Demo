name: CI/CD Pipeline Demo

on:
  push:
    branches: ['feature/*']
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-test-analyze:
    runs-on: windows-latest
    steps:
      # 1) Check out code
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Set up Java for Sonar Scanner
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu

      # 3) Set up .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.x'

      # 4) Restore
      - name: Restore
        run: dotnet restore

      # 5) Early Build
      - name: Build (Early)
        run: dotnet build --no-restore --configuration Release

      # 6) Early Test (Fail early if tests fail)
      - name: Test (Early)
        run: dotnet test --no-build --configuration Release

      # -- IF we reach here, it means early build & test passed. --

      # 7) Cache SonarQube dependencies/scanner (optional optimization)
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # 8) Sonar ANALYZE steps
      - name: Sonar BEGIN
        id: sonar-begin
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"Zach-etier_CI-CD-Pipeline-Demo" `
            /o:"zach-etier" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/coverage.opencover.xml"
          Write-Host "SonarQube Begin completed"

      - name: Build (Sonar)
        shell: powershell
        run: dotnet build --no-restore --configuration Release

      - name: Test (Sonar coverage)
        shell: powershell
        run: dotnet test --no-build --configuration Release `
          /p:CollectCoverage=true `
          /p:CoverletOutput=TestResults/coverage.opencover.xml `
          /p:CoverletOutputFormat=opencover

      - name: Sonar END
        shell: powershell
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          Write-Host "SonarQube Analysis completed"

  create-pr:
    needs: build-test-analyze
    if: success()
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Create/Update Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          head: ${{ github.ref_name }}
          title: "Auto PR from feature branch: ${{ github.ref_name }}"
          body: "This PR was automatically created after successful CI steps."
          reviewers: "octocat"
